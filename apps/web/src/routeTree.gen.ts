/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as MeRouteImport } from './routes/me'
import { Route as IndexRouteImport } from './routes/index'
import { Route as UserUserIDRouteImport } from './routes/user/$userID'
import { Route as AuthLogoutRouteImport } from './routes/auth/logout'
import { Route as PlaylistPlaylistIDIndexRouteImport } from './routes/playlist/$playlistID/index'
import { Route as PlaylistPlaylistIDPlayRouteImport } from './routes/playlist/$playlistID/play'
import { Route as PlaylistPlaylistIDVideoIDRouteImport } from './routes/playlist/$playlistID/$videoID'
import { Route as AuthGoogleRedirectRouteImport } from './routes/auth/google/redirect'
import { Route as AuthGoogleLoginRouteImport } from './routes/auth/google/login'

const MeRoute = MeRouteImport.update({
  id: '/me',
  path: '/me',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UserUserIDRoute = UserUserIDRouteImport.update({
  id: '/user/$userID',
  path: '/user/$userID',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLogoutRoute = AuthLogoutRouteImport.update({
  id: '/auth/logout',
  path: '/auth/logout',
  getParentRoute: () => rootRouteImport,
} as any)
const PlaylistPlaylistIDIndexRoute = PlaylistPlaylistIDIndexRouteImport.update({
  id: '/playlist/$playlistID/',
  path: '/playlist/$playlistID/',
  getParentRoute: () => rootRouteImport,
} as any)
const PlaylistPlaylistIDPlayRoute = PlaylistPlaylistIDPlayRouteImport.update({
  id: '/playlist/$playlistID/play',
  path: '/playlist/$playlistID/play',
  getParentRoute: () => rootRouteImport,
} as any)
const PlaylistPlaylistIDVideoIDRoute =
  PlaylistPlaylistIDVideoIDRouteImport.update({
    id: '/playlist/$playlistID/$videoID',
    path: '/playlist/$playlistID/$videoID',
    getParentRoute: () => rootRouteImport,
  } as any)
const AuthGoogleRedirectRoute = AuthGoogleRedirectRouteImport.update({
  id: '/auth/google/redirect',
  path: '/auth/google/redirect',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthGoogleLoginRoute = AuthGoogleLoginRouteImport.update({
  id: '/auth/google/login',
  path: '/auth/google/login',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/me': typeof MeRoute
  '/auth/logout': typeof AuthLogoutRoute
  '/user/$userID': typeof UserUserIDRoute
  '/auth/google/login': typeof AuthGoogleLoginRoute
  '/auth/google/redirect': typeof AuthGoogleRedirectRoute
  '/playlist/$playlistID/$videoID': typeof PlaylistPlaylistIDVideoIDRoute
  '/playlist/$playlistID/play': typeof PlaylistPlaylistIDPlayRoute
  '/playlist/$playlistID': typeof PlaylistPlaylistIDIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/me': typeof MeRoute
  '/auth/logout': typeof AuthLogoutRoute
  '/user/$userID': typeof UserUserIDRoute
  '/auth/google/login': typeof AuthGoogleLoginRoute
  '/auth/google/redirect': typeof AuthGoogleRedirectRoute
  '/playlist/$playlistID/$videoID': typeof PlaylistPlaylistIDVideoIDRoute
  '/playlist/$playlistID/play': typeof PlaylistPlaylistIDPlayRoute
  '/playlist/$playlistID': typeof PlaylistPlaylistIDIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/me': typeof MeRoute
  '/auth/logout': typeof AuthLogoutRoute
  '/user/$userID': typeof UserUserIDRoute
  '/auth/google/login': typeof AuthGoogleLoginRoute
  '/auth/google/redirect': typeof AuthGoogleRedirectRoute
  '/playlist/$playlistID/$videoID': typeof PlaylistPlaylistIDVideoIDRoute
  '/playlist/$playlistID/play': typeof PlaylistPlaylistIDPlayRoute
  '/playlist/$playlistID/': typeof PlaylistPlaylistIDIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/me'
    | '/auth/logout'
    | '/user/$userID'
    | '/auth/google/login'
    | '/auth/google/redirect'
    | '/playlist/$playlistID/$videoID'
    | '/playlist/$playlistID/play'
    | '/playlist/$playlistID'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/me'
    | '/auth/logout'
    | '/user/$userID'
    | '/auth/google/login'
    | '/auth/google/redirect'
    | '/playlist/$playlistID/$videoID'
    | '/playlist/$playlistID/play'
    | '/playlist/$playlistID'
  id:
    | '__root__'
    | '/'
    | '/me'
    | '/auth/logout'
    | '/user/$userID'
    | '/auth/google/login'
    | '/auth/google/redirect'
    | '/playlist/$playlistID/$videoID'
    | '/playlist/$playlistID/play'
    | '/playlist/$playlistID/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MeRoute: typeof MeRoute
  AuthLogoutRoute: typeof AuthLogoutRoute
  UserUserIDRoute: typeof UserUserIDRoute
  AuthGoogleLoginRoute: typeof AuthGoogleLoginRoute
  AuthGoogleRedirectRoute: typeof AuthGoogleRedirectRoute
  PlaylistPlaylistIDVideoIDRoute: typeof PlaylistPlaylistIDVideoIDRoute
  PlaylistPlaylistIDPlayRoute: typeof PlaylistPlaylistIDPlayRoute
  PlaylistPlaylistIDIndexRoute: typeof PlaylistPlaylistIDIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/me': {
      id: '/me'
      path: '/me'
      fullPath: '/me'
      preLoaderRoute: typeof MeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/user/$userID': {
      id: '/user/$userID'
      path: '/user/$userID'
      fullPath: '/user/$userID'
      preLoaderRoute: typeof UserUserIDRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/logout': {
      id: '/auth/logout'
      path: '/auth/logout'
      fullPath: '/auth/logout'
      preLoaderRoute: typeof AuthLogoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/playlist/$playlistID/': {
      id: '/playlist/$playlistID/'
      path: '/playlist/$playlistID'
      fullPath: '/playlist/$playlistID'
      preLoaderRoute: typeof PlaylistPlaylistIDIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/playlist/$playlistID/play': {
      id: '/playlist/$playlistID/play'
      path: '/playlist/$playlistID/play'
      fullPath: '/playlist/$playlistID/play'
      preLoaderRoute: typeof PlaylistPlaylistIDPlayRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/playlist/$playlistID/$videoID': {
      id: '/playlist/$playlistID/$videoID'
      path: '/playlist/$playlistID/$videoID'
      fullPath: '/playlist/$playlistID/$videoID'
      preLoaderRoute: typeof PlaylistPlaylistIDVideoIDRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/google/redirect': {
      id: '/auth/google/redirect'
      path: '/auth/google/redirect'
      fullPath: '/auth/google/redirect'
      preLoaderRoute: typeof AuthGoogleRedirectRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/google/login': {
      id: '/auth/google/login'
      path: '/auth/google/login'
      fullPath: '/auth/google/login'
      preLoaderRoute: typeof AuthGoogleLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MeRoute: MeRoute,
  AuthLogoutRoute: AuthLogoutRoute,
  UserUserIDRoute: UserUserIDRoute,
  AuthGoogleLoginRoute: AuthGoogleLoginRoute,
  AuthGoogleRedirectRoute: AuthGoogleRedirectRoute,
  PlaylistPlaylistIDVideoIDRoute: PlaylistPlaylistIDVideoIDRoute,
  PlaylistPlaylistIDPlayRoute: PlaylistPlaylistIDPlayRoute,
  PlaylistPlaylistIDIndexRoute: PlaylistPlaylistIDIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
