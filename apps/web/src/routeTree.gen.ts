/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MeImport } from './routes/me'
import { Route as IndexImport } from './routes/index'
import { Route as UUserIDImport } from './routes/u/$userID'
import { Route as AuthLogoutImport } from './routes/auth/logout'
import { Route as PPlaylistIDIndexImport } from './routes/p/$playlistID/index'
import { Route as PPlaylistIDVideoIDImport } from './routes/p/$playlistID/$videoID'
import { Route as AuthGoogleRedirectImport } from './routes/auth/google/redirect'
import { Route as AuthGoogleLoginImport } from './routes/auth/google/login'

// Create/Update Routes

const MeRoute = MeImport.update({
  id: '/me',
  path: '/me',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UUserIDRoute = UUserIDImport.update({
  id: '/u/$userID',
  path: '/u/$userID',
  getParentRoute: () => rootRoute,
} as any)

const AuthLogoutRoute = AuthLogoutImport.update({
  id: '/auth/logout',
  path: '/auth/logout',
  getParentRoute: () => rootRoute,
} as any)

const PPlaylistIDIndexRoute = PPlaylistIDIndexImport.update({
  id: '/p/$playlistID/',
  path: '/p/$playlistID/',
  getParentRoute: () => rootRoute,
} as any)

const PPlaylistIDVideoIDRoute = PPlaylistIDVideoIDImport.update({
  id: '/p/$playlistID/$videoID',
  path: '/p/$playlistID/$videoID',
  getParentRoute: () => rootRoute,
} as any)

const AuthGoogleRedirectRoute = AuthGoogleRedirectImport.update({
  id: '/auth/google/redirect',
  path: '/auth/google/redirect',
  getParentRoute: () => rootRoute,
} as any)

const AuthGoogleLoginRoute = AuthGoogleLoginImport.update({
  id: '/auth/google/login',
  path: '/auth/google/login',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/me': {
      id: '/me'
      path: '/me'
      fullPath: '/me'
      preLoaderRoute: typeof MeImport
      parentRoute: typeof rootRoute
    }
    '/auth/logout': {
      id: '/auth/logout'
      path: '/auth/logout'
      fullPath: '/auth/logout'
      preLoaderRoute: typeof AuthLogoutImport
      parentRoute: typeof rootRoute
    }
    '/u/$userID': {
      id: '/u/$userID'
      path: '/u/$userID'
      fullPath: '/u/$userID'
      preLoaderRoute: typeof UUserIDImport
      parentRoute: typeof rootRoute
    }
    '/auth/google/login': {
      id: '/auth/google/login'
      path: '/auth/google/login'
      fullPath: '/auth/google/login'
      preLoaderRoute: typeof AuthGoogleLoginImport
      parentRoute: typeof rootRoute
    }
    '/auth/google/redirect': {
      id: '/auth/google/redirect'
      path: '/auth/google/redirect'
      fullPath: '/auth/google/redirect'
      preLoaderRoute: typeof AuthGoogleRedirectImport
      parentRoute: typeof rootRoute
    }
    '/p/$playlistID/$videoID': {
      id: '/p/$playlistID/$videoID'
      path: '/p/$playlistID/$videoID'
      fullPath: '/p/$playlistID/$videoID'
      preLoaderRoute: typeof PPlaylistIDVideoIDImport
      parentRoute: typeof rootRoute
    }
    '/p/$playlistID/': {
      id: '/p/$playlistID/'
      path: '/p/$playlistID'
      fullPath: '/p/$playlistID'
      preLoaderRoute: typeof PPlaylistIDIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/me': typeof MeRoute
  '/auth/logout': typeof AuthLogoutRoute
  '/u/$userID': typeof UUserIDRoute
  '/auth/google/login': typeof AuthGoogleLoginRoute
  '/auth/google/redirect': typeof AuthGoogleRedirectRoute
  '/p/$playlistID/$videoID': typeof PPlaylistIDVideoIDRoute
  '/p/$playlistID': typeof PPlaylistIDIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/me': typeof MeRoute
  '/auth/logout': typeof AuthLogoutRoute
  '/u/$userID': typeof UUserIDRoute
  '/auth/google/login': typeof AuthGoogleLoginRoute
  '/auth/google/redirect': typeof AuthGoogleRedirectRoute
  '/p/$playlistID/$videoID': typeof PPlaylistIDVideoIDRoute
  '/p/$playlistID': typeof PPlaylistIDIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/me': typeof MeRoute
  '/auth/logout': typeof AuthLogoutRoute
  '/u/$userID': typeof UUserIDRoute
  '/auth/google/login': typeof AuthGoogleLoginRoute
  '/auth/google/redirect': typeof AuthGoogleRedirectRoute
  '/p/$playlistID/$videoID': typeof PPlaylistIDVideoIDRoute
  '/p/$playlistID/': typeof PPlaylistIDIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/me'
    | '/auth/logout'
    | '/u/$userID'
    | '/auth/google/login'
    | '/auth/google/redirect'
    | '/p/$playlistID/$videoID'
    | '/p/$playlistID'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/me'
    | '/auth/logout'
    | '/u/$userID'
    | '/auth/google/login'
    | '/auth/google/redirect'
    | '/p/$playlistID/$videoID'
    | '/p/$playlistID'
  id:
    | '__root__'
    | '/'
    | '/me'
    | '/auth/logout'
    | '/u/$userID'
    | '/auth/google/login'
    | '/auth/google/redirect'
    | '/p/$playlistID/$videoID'
    | '/p/$playlistID/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MeRoute: typeof MeRoute
  AuthLogoutRoute: typeof AuthLogoutRoute
  UUserIDRoute: typeof UUserIDRoute
  AuthGoogleLoginRoute: typeof AuthGoogleLoginRoute
  AuthGoogleRedirectRoute: typeof AuthGoogleRedirectRoute
  PPlaylistIDVideoIDRoute: typeof PPlaylistIDVideoIDRoute
  PPlaylistIDIndexRoute: typeof PPlaylistIDIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MeRoute: MeRoute,
  AuthLogoutRoute: AuthLogoutRoute,
  UUserIDRoute: UUserIDRoute,
  AuthGoogleLoginRoute: AuthGoogleLoginRoute,
  AuthGoogleRedirectRoute: AuthGoogleRedirectRoute,
  PPlaylistIDVideoIDRoute: PPlaylistIDVideoIDRoute,
  PPlaylistIDIndexRoute: PPlaylistIDIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/me",
        "/auth/logout",
        "/u/$userID",
        "/auth/google/login",
        "/auth/google/redirect",
        "/p/$playlistID/$videoID",
        "/p/$playlistID/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/me": {
      "filePath": "me.tsx"
    },
    "/auth/logout": {
      "filePath": "auth/logout.tsx"
    },
    "/u/$userID": {
      "filePath": "u/$userID.tsx"
    },
    "/auth/google/login": {
      "filePath": "auth/google/login.tsx"
    },
    "/auth/google/redirect": {
      "filePath": "auth/google/redirect.tsx"
    },
    "/p/$playlistID/$videoID": {
      "filePath": "p/$playlistID/$videoID.tsx"
    },
    "/p/$playlistID/": {
      "filePath": "p/$playlistID/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
